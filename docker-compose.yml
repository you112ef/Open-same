version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: open-same-postgres
    environment:
      POSTGRES_DB: opensame
      POSTGRES_USER: opensame
      POSTGRES_PASSWORD: opensame_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - open-same-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opensame"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: open-same-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - open-same-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: open-same-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: opensame
      RABBITMQ_DEFAULT_PASS: opensame_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - open-same-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway (Kong)
  kong:
    image: kong:3.4-alpine
    container_name: open-same-kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: opensame
      KONG_PG_PASSWORD: opensame_password
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - open-same-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service (Go)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: open-same-backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=opensame
      - DB_USER=opensame
      - DB_PASSWORD=opensame_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=opensame
      - RABBITMQ_PASS=opensame_password
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - API_PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - open-same-network
    volumes:
      - ./backend:/app
      - /app/tmp

  # Frontend Application (React PWA)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: open-same-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - kong
    networks:
      - open-same-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # SDK Development Server
  sdk:
    build:
      context: ./sdk
      dockerfile: Dockerfile
    container_name: open-same-sdk
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
    depends_on:
      - kong
    networks:
      - open-same-network
    volumes:
      - ./sdk:/app
      - /app/node_modules

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: open-same-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - open-same-network

  grafana:
    image: grafana/grafana:latest
    container_name: open-same-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - open-same-network

  # Development Tools
  adminer:
    image: adminer:latest
    container_name: open-same-adminer
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    networks:
      - open-same-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  open-same-network:
    driver: bridge